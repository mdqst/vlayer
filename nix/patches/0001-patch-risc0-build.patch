--- a/src/lib.rs
+++ b/src/lib.rs
@@ -407,14 +407,20 @@ fn sanitized_cmd(tool: &str) -> Command {
 /// Creates a std::process::Command to execute the given cargo
 /// command in an environment suitable for targeting the zkvm guest.
 pub fn cargo_command(subcmd: &str, rust_flags: &[&str]) -> Command {
-    let rustc = sanitized_cmd("rustup")
-        .args(["+risc0", "which", "rustc"])
-        .output()
-        .expect("rustup failed to find risc0 toolchain")
-        .stdout;
+    let rustc = if let Ok(path) = env::var("RISC0_TOOLCHAIN_PATH") {
+        let mut path = String::from(path);
+        path.push_str("/bin/rustc");
+        path
+    } else {
+        let rustc = sanitized_cmd("rustup")
+            .args(["+risc0", "which", "rustc"])
+            .output()
+            .expect("rustup failed to find risc0 toolchain")
+            .stdout;
+        let rustc = String::from_utf8(rustc).unwrap();
+        rustc.trim().to_string()
+    };
 
-    let rustc = String::from_utf8(rustc).unwrap();
-    let rustc = rustc.trim();
     println!("Using rustc: {rustc}");
 
     let mut cmd = sanitized_cmd("cargo");
@@ -660,6 +666,9 @@ fn build_guest_package<P>(
 }
 
 fn detect_toolchain(name: &str) {
+    if env::var_os("RISC0_TOOLCHAIN_PATH").is_some() {
+        return;
+    }
     let result = Command::new("rustup")
         .args(["toolchain", "list", "--verbose"])
         .stderr(Stdio::inherit())
